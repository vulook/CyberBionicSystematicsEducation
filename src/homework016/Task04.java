package homework016;

/**
 * FileName: Task04
 * Author:   Andriy Vulook
 * Date:     02.03.2023 17:23
 * Description: Oracle
 */

public class Task04 {

/**
 * Абстрактний клас — це оголошений клас abstract— він може включати або не включати абстрактні методи.
 * Абстрактні класи не можуть бути створені, але вони можуть бути підкласами.
 * Абстрактний метод — це метод, який оголошується без реалізації (без фігурних дужок і після крапки з комою),
 * ось так:
 * abstract void moveTo(double deltaX, double deltaY);
 *
 * Абстрактні класи схожі на інтерфейси. Ви не можете створити їх екземпляри, і вони можуть містити суміш методів,
 * оголошених з реалізацією або без неї. Однак за допомогою абстрактних класів ви можете оголошувати поля, які не є
 * статичними й остаточними, і визначати публічні, захищені та приватні конкретні методи. З інтерфейсами всі поля
 * автоматично стають загальнодоступними, статичними та остаточними, а всі методи, які ви оголошуєте або визначаєте
 * (як методи за замовчуванням), є публічними. Крім того, ви можете розширити лише один клас, незалежно від того,
 * чи є він абстрактним, тоді як ви можете реалізувати будь-яку кількість інтерфейсів.
 *
 * Коли слід використовувати: абстрактні класи чи інтерфейси?
 *
 * Для абстрактних класів:
 * Ви хочете поділитися кодом між кількома тісно пов’язаними класами.
 * Ви очікуєте, що класи, які розширюють ваш абстрактний клас, мають багато загальних методів або полів або вимагають
 * модифікаторів доступу, відмінних від public (наприклад, protected і private).
 * Ви хочете оголосити нестатичні або нефінальні поля. Це дозволяє визначати методи, які можуть отримувати доступ і
 * змінювати стан об’єкта, якому вони належать.
 *
 * Для абстрактних класів:
 * Ви очікуєте, що непов’язані класи реалізують ваш інтерфейс. Наприклад,
 * інтерфейси Comparableта Cloneableреалізовані багатьма непов’язаними класами.
 * Ви хочете вказати поведінку певного типу даних, але не турбуєтесь про те, хто реалізує його поведінку.
 * Ви хочете скористатися множинним успадкуванням типу.
 *
 * інтерфейс — це еталонний тип, подібний до класу, який може містити лише константи, сигнатури методів, методи
 * за замовчуванням, статичні методи та вкладені типи. Тіла методів існують лише для методів за замовчуванням і
 * статичних методів. Інтерфейси не можуть бути створені — вони можуть бути реалізовані лише класами або розширені
 * іншими інтерфейсами
 *
 * Щоб використовувати інтерфейс потрібен клас. Коли інстанційний клас реалізує інтерфейс, він надає тіло методу
 * для кожного з методів, оголошених в інтерфейсі.
 *
 */


}
