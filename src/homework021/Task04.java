package homework021;

/**
 * FileName: Task04
 * Author:   Andriy Vulook
 * Date:     13.03.2023 0:18
 * Description: Go to the Oracle website.
 */

public class Task04 {

/*
Генерики додають стабільності вашому коду, роблячи більше ваших помилок виявленими під час компіляції.


Загальні методи — це методи, які вводять власні параметри типу.
Це схоже на оголошення загального типу, але область параметра типу обмежена методом, у якому він оголошений.
Дозволені статичні та нестатичні загальні методи, а також загальні конструктори класів.

Синтаксис загального методу включає список параметрів типу всередині кутових дужок,
який відображається перед типом, що повертається методом.
Для статичних загальних методів розділ параметрів типу має з’являтися перед типом, який повертає метод.

Основні концепції:

Генерики дозволяють створювати класи, інтерфейси та методи, що працюють з параметрами типу.
Параметр типу може бути будь-яким класом або інтерфейсом, включаючи примітивні типи.
Параметри типу передаються в генеричні типи як аргументи під час компіляції, і перевіряються на відповідність за допомогою механізму перевірки типів.
Основні переваги:

Перевірка типів відбувається на етапі компіляції, що дозволяє уникнути помилок під час виконання програми.
Генерики дозволяють писати більш загальний та повторно використовуваний код.
Генерики дозволяють створювати класи та методи, що працюють з різними типами даних, зберігаючи при цьому безпеку типів.
Синтаксис:

Генеричні типи вказуються за допомогою параметра типу, вказаного в кутових дужках, після імені класу або інтерфейсу.
Параметри типу можуть мати обмеження, яке вказує на класи або інтерфейси, які можуть бути використані в якості параметрів типу.
Параметр типу може бути використаний як тип повернення методу, тип параметра методу або тип поля класу.
Передача параметрів типу в генеричний тип відбувається за допомогою використання кутових дужок.
Приклади використання:

Створення генеричного класу: class MyClass<T> { }
Використання параметру типу як тип поля: private T field;
Використання параметру типу як тип параметра методу: public void doSomething(T param) { }
Обмеження параметра типу за допомогою ключового слова extends: class MyClass<T extends Number> { }
Створення інстанції генеричного класу: MyClass<Integer> myObj = new MyClass<>();
Використання генеричного методу: `public static

Параметри обмеженого типу є ключовими для реалізації загальних алгоритмів.

Реалізація методу є простою, але він не компілюється, оскільки оператор більшого ніж ( > ) застосовується лише до
примітивних типів, таких як short , int , double , long , float , byte та char . Ви не можете використовувати
оператор > для порівняння об’єктів.
Щоб вирішити проблему, використовуйте параметр типу, обмежений інтерфейсом Comparable<T> :

public interface Comparable<T> {
    public int compareTo(T o);
}

The resulting code will be:

public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem) {
    int count = 0;
    for (T e : anArray)
        if (e.compareTo(elem) > 0)
            ++count;
    return count;
}

Про  Генерики Фабрики:

Фабричний метод - це створювальний шаблон проектування, який використовується для створення об'єктів
без прямого виклику конструктора.
Генерики фабрики - це фабрики, які працюють з параметрами типу, тобто можуть створювати об'єкти різних типів
залежно від параметрів, які передаються їм.
Генерики фабрики дозволяють створювати загальні методи, які можуть створювати об'єкти будь-якого типу,
забезпечуючи при цьому безпеку типів. Генерики фабрики використовуються в програмуванні для створення об'єктів
з різних типів за однаковим інтерфейсом.

Основні переваги:

Генерики фабрики дозволяють знизити кількість повторюваного коду, який потрібно написати для створення різних об'єктів.
Генерики фабрики дозволяють забезпечити безпеку типів при створенні об'єктів різних типів.
Генерики фабрики дозволяють створювати об'єкти залежно від параметрів, переданих їм під час виклику методу.



 */
}
